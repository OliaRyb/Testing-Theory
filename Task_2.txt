1. Что такое проект?	

	Проект — это временное предприятие, направленное на создание уникального продукта, услуги или результата.

2. Из каких этапов состоит Waterfall model/Каскадная модель?	

	1. Утверждение требований;
	2. Проектирование;
	3. Разработка;
	4. Тестирование;
	5. Поддержка;
	
3. Какие преимущества и недостатки Waterfall model/Каскадной модели?

	Плюсы:
	1. Полное документирование каждого этапа;
	2. Четкое планирование сроков и затрат;
	3. Прозрачность процессов для заказчика;
	Минусы:
	1. Необходимость утверждения полного объема требований к системе еще на первом этапе;
	2. В случае необходимости внесения изменений требований позднее – возврат к первой стадии и переделка заново всей проделанной работы;
	3. Увеличение затрат средств и времени в случае необходимости изменения требований.

	Когда использовать каскадную модель:
	– В проектах с четко определенными требованиями, для которых не предусматривается их изменений в процессе разработки;
	– Для проектов, которые мигрируют с одной платформы на другую. То есть, требования остаются те же, меняется только системное окружение и/или язык программирования;
	– Когда от компании-разработчика не требуется проводить тестирования – к примеру, его обеспечением займется сам заказчик или сторонняя фирма.

4. Из каких этапов состоит V-model/V- модель?	

	1. Планирование проектов и требований;
	2. Анализ требований продукта и спецификаций;
	3. Разработка архитектурного проекта;
	4. Детализированная разработка прокета; 
	5. Кодирование;
	6. Модульное тестирование;
	7. Интеграция и тестирование;
	8. Системное и приемочное тестирование;
	9. Производство, эксплуатация и сопровождение;
	
5. Когда использовать V-model/V- модель?	

	Плюсы V-модели:
	+ строгая этапизация;
	+ планирование тестирования и верификация системы производятся на ранних этапах;
	+ улучшенный, по сравнению с каскадной моделью, тайм-менеджмент;
	+ промежуточное тестирование.
	Минусы V-модели:
	— недостаточная гибкость модели;
	— собственно создание программы происходит на этапе написания кода, то есть уже в середине процесса разработки;
	— недостаточный анализ рисков;
	— нет работы с параллельными событиями и возможности динамического внесения изменений.

	Когда использовать V-модель:
	– В проектах, в которых существуют временные и финансовые ограничения;
	– Для задач, которые предполагают более широкое, по сравнению с каскадной моделью, тестовое покрытие.
	
6. Из каких этапов состоит Iterative model/Итеративная модель?	

	1. Требования
	2. Дизайн и разработка
	3. Внедрение и тестирование
	4. Обзор ---> 1.

7. Когда использовать Iterative model/Итеративной модели?	

	Когда использовать итеративную модель:
	– для крупных проектов;
	– когда известны, по крайней мере, ключевые требования;
	– когда требования к проекту могут меняться в процессе разработки.

	Итеративная модель является ключевым элементом так называемых «гибких» (Agile) подходов к разработке программного обеспечения, основные из которых мы рассмотрим в следующих разделах.
	
8. Плюсы и минусы Iterative model/Итеративной модели?	

	Плюсы итеративной модели:
	+ раннее создание работающего ПО;
	+ гибкость – готовность к изменению требований на любом этапе разработки;
	+ каждая итерация – маленький этап, для которого тестирование и анализ рисков обеспечить проще, чем для всего жизненного цикла продукта.
	Минусы итеративной модели:
	— каждая фаза – самостоятельна, отдельные итерации не накладываются;
	— могут возникнуть проблемы с реализацией общей архитектуры системы, поскольку не все требования известны к началу проектирования.

9. Agile - это?	

	Agile – это комплексная методика организации процесса разработки ПО, которая включает в себя целую семью отдельных подходов, или, как их еще называют, фреймворков (Scrum, Kanban, Lean, DSDM, XP, FDD, Crystal). 

10. Agile манифест - это?	

	Философия Agile включает в себя: Agile Manifesto, и 12 принципов.

11. Какие ценности Agile манифест?	

	Agile Manifesto:
	1. Люди и сотрудничество важнее процессов и инструментов.
	2. Работающий продукт важнее исчерпывающей документации.
	3. Положительное сотрудничество с заказчиком важнее обязанностей по контракту.
	4. Готовность к изменениям важнее соблюдения плана.
	
12. Основные принципы Agile манифест?	

	Принципы Agile:
	1. Наш главный приоритет – удовлетворение клиента путем ранней и непрерывной разработки ценного программного обеспечения. Заказчик и исполнитель заинтересованы в успехе одинаково.
	2. Положительное отношение к изменениям даже на поздней стадии разработки. Гибкие процессы используют изменения для конкурентного преимущества клиента.
	3. Работающий продукт следует выпускать как можно чаще, от нескольких недель до нескольких месяцев, предпочитая более короткие сроки.
	4. Заказчик и разработчики должны работать вместе каждый день на протяжении всего проекта.
	5. Над проектом должны работать мотивированные специалисты. Обеспечьте им необходимую среду, поддержку и доверьте им работу.
	6. Наиболее эффективным и действенным методом передачи информации в команду разработчиков и внутри нее является беседа с глазу на глаз.
	7. Работающее программное обеспечение является основным показателем прогресса.
	8. Гибкие процессы способствуют устойчивому развитию. Заказчик и разработчики должны иметь возможность поддерживать постоянный темп до бесконечности.
	9. Постоянное внимание к техническому совершенству и качеству проектирования повышает гибкость проекта.
	10. Простота – это искусство не делать лишней работы.
	11. Лучшие архитектуры, требования и проекты исходят из самоорганизующихся команд.
	12. Через регулярные промежутки времени команда рассуждает о том, как стать более эффективной, а затем соответственно настраивает и корректирует свое поведение.

13. Scrum - это? (опишите подробно)	

	Scrum – это методика, помогающая команде профессионалов организовать свою работу максимально эффективно. 
	Ценности Scrum:
	1. Обязательство. Члены команды лично обязуются добиться командных целей.
	2. Мужество. Члены команды делают правильные вещи и трудятся над сложными проблемами.
	3. Фокус. Сосредоточенность на работе, определенной для спринта, и целях команды.
	4. Открытость. Члены команды и заинтересованные стороны открыто рассказывают о работе и вызовах, с которыми сталкивается команда.
	5. Уважение. Все члены команды уважают друг друга.

	Принципы Scrum:
	1. Прозрачность. Команда должна работать в среде, где каждый знает, с какими проблемами сталкиваются другие члены команды.
	2. Проверка. Частые проверки встроены в структуру процесса, чтобы дать команде возможность обдумать, как работает процесс. К таким пунктам проверки относятся Daily Scrum Meeting и Sprint Review Meeting.
	3. Адаптация. Команда постоянно исследует актуальность продуктов и пересматривает не имеющие смысла пункты.

	Команда Scrum:
	1. Product Owner
	2. Scrum Master 
	3. Development Team 
	
14. Что такое Velocity / Capacity?	

	Velocity -- скорость производительности команды в Scrum или количество стори поинтов, выполненое в прошлые спринты;
	Capacity -- количество идеальных часов, доступное в следующем спринте;

15. Преимущества и недостатки Scrum	

	Плюсы:
	1. команда работает короткими этапами, на каждом из которых определяет цели и пути их достижения, что ускоряет процесс работы;
	2. команда работает над разными задачами проекта одновременно, что позволяет быстрее достичь желаемой цели;
	3. большие задачи разделяют на мелкие, поэтому внести корректировки прямо в процессе работы намного проще, чем в каскадном подходе;
	4. сокращается время на поиск ошибок и объяснение проблем;
	5. минимизация финансовых рисков благодаря оперативной реакции на изменения и устранение ошибок;
	6. каждый член команды четко знает свою задачу, следовательно, повышается уровень ответственности к работе;
	7. присутствует открытый обмен информацией, что делает процесс работы максимально прозрачным;
	8. поддержание высокого уровня мотивации в команде благодаря ежедневной видимости достижений.
	Минусы:
	1. успех проекта во многом зависит от скрам-мастера (организатор процесса), квалификации команды и их приверженности своему делу;
	2. далеко не всегда можно адаптировать метод скрам под сферу деятельности, поскольку есть проекты, требующие исключительно планового подхода в работе;
	3. требует регулярной коммуникации с заказчиком, что порой тормозит процесс из-за невозможности получения обратной связи;
	4. сложность внедрения в масштабных и сложных проектах, так как больше подходит для малых и средних.
	
16. Что такое ретроспектива?	
	
	Ретроспектива -- это специальная встреча, которая проводится по итогам одного или нескольких спринтов. На ней команда подводит итоги проделанной работы и рефлексирует о проведенном времени.
	
17. Kanban- это? (опишите подробно)	

	Kanban — специальный метод управления проектами. Его суть заключается в построении непрерывного рабочего процесса, режима потока. При работе по kanban команда должна достичь максимальной эффективности, а рабочий процесс для этого визуализируется.

	В основе kanban-метода лежит 9 ключевых ценностей:
	1. Прозрачность. 
	2. Баланс. Команде стоит соблюдать баланс между работой и личной жизнью.
	3. Сотрудничество.
	4. Клиентоориентированность. П
	5. Поток. Именно к состоянию потока должна стремиться команда. В состоянии потока задачи выполняются быстро с минимальным 
	6. Лидерство. Хороший лидер создает самостоятельную команду. Слабый лидер уничтожает ее.
	7. Понимание. Не стоит вводить какие-либо изменения в процессах, если у команды нет понимания, для чего они нужны.
	8. Согласие. Эта ценность про умение находить компромисс в работе и конфликтах с коллегами и клиентами.
	9. Уважение.
	Для соблюдения этих ценностей, метод kanban придерживается системы из шести рабочих практик:
	1. Визуализация работы. Главный атрибут kanban — доска, на которой перемещаются задачи. 
	2. Ограничение незавершенных заданий. Для этого в методе существуют WIP-лимиты — специальные ограничители, которые фокусируют команду на текущих задачах.
	3. Управление потоком. Именно в состоянии потока команда достигает своей максимальной эффективности. Одна из задач kanban — создание условий для поддержания этого состояния.
	4. Установление четких правил. kanban поощряет наличие четких рабочих регламентов. Ведь именно следование правилам способствует увеличению эффективности команды — главной цели метода.
	5. Сбор обратной связи. Для этого в kanban существует система отдельных мероприятий — каденций. Хотя эту же роль могут выполнять и ретроспективы.
	6. Улучшение и эволюция.
	
18. Преимущества и недостатки Kanban?	

	Плюсы Канбан-метода:
	1. Визуализация работы;
	2. Гибкость;
	3. Ориентация на непрерывную постановку задач;
	4. Улучшенное сотрудничество. Использование визуальной доски и фокус на ограничении незавершенной работы может помочь командам более эффективно сотрудничать. Команды могут видеть, над какими задачами работают их коллеги, а это помогает сократить дублирование усилий и повысить общую эффективность;
	Минусы:
	1. Отсутствие структуры;
	2. Отсутствие временных рамок;
	3. Ограниченное количество ретроспектив спринта;
	4. Отсутствие расстановки приоритетов;
	
19. Что такое SDLC? Что происходит на каждом этапе?	

	1. Планирование (Planning): На этой стадии определяются цели и требования проекта, выделяются ресурсы и расписывается расписание работ. Принимаются стратегические решения и формулируются цели проекта.
	2. Анализ (Analysis): Здесь проводится более детальное изучение требований и целей проекта. Аналитики и бизнес-аналитики работают с заказчиком для определения функциональности, интерфейсов и других требований к продукту.
	3. Проектирование (Design): На этой стадии разрабатывается архитектура системы и проектируются компоненты и интерфейсы. Проектирование включает в себя выбор технологий, создание диаграмм и спецификаций.
	3. Реализация и разработка (Implementation): Здесь происходит фактическое создание кода и разработка системы на основе предыдущих стадий. Программисты пишут код, тестируют его и интегрируют компоненты системы.
	4. Тестирование (Testing): На этой стадии система проверяется на соответствие требованиям и корректность работы. Включает в себя функциональное тестирование, регрессионное тестирование, тестирование производительности и другие виды тестирования.
	5. Внедрение (Deployment): Программа или система запускается в рабочую среду после успешного завершения тестирования. Внедрение может включать в себя установку программного обеспечения на серверы, обучение пользователей и переход к новой системе.
	6. Сопровождение (Maintenance): После запуска системы в эксплуатацию начинается стадия сопровождения, включающая исправление ошибок, добавление новых функций и обновление системы в соответствии с изменяющимися требованиями и условиями эксплуатации.
	
20. Что такое STLS? Что происходит на каждом этапе?	

	1. Анализ требований (Requirement Analysis): Тестировщики анализируют требования к продукту, определяют тестовые случаи и сценарии, а также выявляют потенциальные проблемы и противоречия в требованиях.
	2. Планирование (Planning): На этом этапе определяются цели тестирования, составляется тестовый план и план ресурсов. Определяются критерии приемки и определяются стратегии тестирования.
	3. Проектирование тестов (Test Design): Здесь разрабатываются тестовые сценарии и случаи, выбираются методы и техники тестирования. Создаются тестовые данные и среды.
	4. Имплементация тестов (Test Implementation): На этом этапе создаются и выполняются тестовые сценарии и случаи в соответствии с разработанным планом тестирования. Осуществляется подготовка к исполнению тестов.
	5. Выполнение тестов (Test Execution): Здесь проводится фактическое выполнение тестов, регистрация результатов и отслеживание ошибок. Тестировщики выполняют предварительные, функциональные, интеграционные, системные и другие виды тестирования.
	6. Анализ и отчетность (Test Analysis & Reporting): После выполнения тестов проводится анализ полученных результатов, выявляются дефекты и проблемы, разрабатываются отчеты о выполненных тестах и их результатах.