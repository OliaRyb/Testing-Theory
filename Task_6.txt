1.	Что такое Ошибка/Дефект/Отказ?	

	Ошибки --действие человека, которое приводит к неправильному результату;
	Дефект -- результат ошибки, несове6ршенство или недостаток рабочего прокукта, проявляющееся в несоотвествии требованиям или спецификациям;
	Отказ -- событие, при котором компонент или система не выполняют требуюмую функцию в соотвествии со спецификацией;
	
2.	Перечислите Основные типы багов?	
	1. Функциональный
	2. Визуальный
	3. Логический
	4. Дефект удобства использования
	5. Баг нагрузки
	6. Баг производительности
	7. Дефекты безопасности
	
3.	Перечислите “Хитрые баги”?	

	Это баги, которые характеризуются чрезвычайно сложным (с точки зрения обычного тестировщика), или непредсказуемым поведением, чаще всего вызванным глубокими архитектурными дефектами системы.
	
4.	Приведите пример Blocker bug	
	
	Не работает кнопка Burger menu в мобильном приложении из-за чего нету возможности переходить между разделами

5.	Приведите пример Critical bug	

	Нету возможности свернуть мобильное приложение

6.	Приведите пример Major bug	

	Не работающая ссылка на важный сторонний ресурс

7.	Приведите пример Minor bug	

	Не работающее пролистывание с помощью свайпов в мобильном приложении, при этом есть возможность пролистывать с помощью кнопок
	
8.	Приведите пример Trivial bug	

	Опечатка в тексте не мешающая проять смысл написаного.
	
9.	Какой жизненный цикл Bug report?	
	
	1. Обнаружен ---> Отложен
	2. Назначен              | 
	3. Исправлен            |
	4. Проверен              |
	5. Закрыт ---> Открыт снова ---> Рекомендован к отклонению ---> Отклонен
	
10.	Какие основные цели локализации дефекта?	

	Облегчить и ускорить исправление на стороне разработки.
	
11.	Где могут находиться дефекты?	

	В требованиях, в коде, в тестовой документации.

12.	Перечислите методы локализации дефекта в клиентской части	

	1. Построение модели воспроизведения
	Этот метод предусматривает воспроизведение бага с целью выявления его симптомов и условий, при которых он проявляется. Для этого можно использовать простое воспроизведение на основе документации или более сложные сценарии тестирования.
	2. Анализ кода и трассировки стека
	Изучение и анализ исходного кода приложения или компонента, который вызывает баг, может помочь определить причину проблемы. Также полезно изучить трассировку стека, чтобы определить последовательность вызовов, приводящих к ошибке.
	3. Использование логов и отладочной информации
	Логи и отладочная информация могут содержать ценные данные о проблеме, например, об ошибках, параметрах, переданных в функции, или состоянии системы во время сбоя. Исследование этих данных может помочь в локализации бага.
	4. Тестирование на различных конфигурациях
	При работе со сложными системами важно проверить, возникает ли баг только в определенных условиях, например, с определенной операционной системой или версией программного обеспечения. Тестирование на различных конфигурациях поможет выявить такие зависимости.

13.	Перечислите методы локализации дефекта в серверной части	

	1. Логирование (Logging): Регистрация информации о состоянии программы, выполнении запросов и других событиях в журналах (логах) сервера может помочь в выявлении мест, где возникают проблемы.
	2. Отладка (Debugging): Использование отладочных инструментов, таких как отладчики, позволяет проанализировать состояние программы во время выполнения и выявить причину неправильного поведения.
	3. Мониторинг (Monitoring): Наблюдение за работой сервера с помощью мониторинговых инструментов позволяет выявить аномальное поведение, нагрузку на сервер и другие проблемы.
	4. Анализ запросов и ответов (Request/Response Analysis): Изучение запросов, поступающих на сервер, и ответов, возвращаемых клиенту, может помочь выявить неправильные данные или некорректные операции.
	5. Ретроспективный анализ (Retrospective Analysis): Изучение предыдущих ошибок и проблем может помочь выявить общие причины и паттерны, которые приводят к багам в серверной части.
	6. Анализ стека вызовов (Stack Trace Analysis): Изучение стека вызовов (stack trace) при возникновении ошибок может помочь определить место, где произошла проблема.
	7. Профилирование производительности (Performance Profiling): Использование инструментов для анализа производительности сервера позволяет выявить узкие места и проблемы, которые могут приводить к сбоям или неправильному функционированию.