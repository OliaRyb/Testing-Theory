1.	Требования - это что?	

	Требование (requirement50) — описание того, какие функции и с соблюдением каких условий должно выполнять приложение в процессе решения полезной для пользователя задачи.

2.	Для чего нужен Анализ требований в разработке программного обеспечения?	

	Анализ требований помогает c:
	1. Предотвращение ошибок на ранних этапах;
	2. Создание основы для тестирования;
	3. Понимание потребностей клиентов и пользователей;
	4. Улучшение коммуникации и вовлечения заинтересованных сторон;

3.	Перечислите Виды требований	

	1. Бизнес-требования (Bussines Requirement Document (BRD) -- документ в котором описывается общее виденье проекта и требования заказчика);
	2. Пользовательские требования (Use cases, user stories);
	3. Уровень продуктных требований (Functional Requrement Specification (FRS) -- функциональные и нефункциональные требования);
	
4.	Перечислите Функциональные уровни требований	

	1. Пользовательские требования (User Requirements):
	Описывают функциональные возможности, которые должны быть доступны конечным пользователям системы для выполнения их задач и достижения целей.
	2. Системные требования (System Requirements):
	Этот уровень детализирует, каким образом система должна реализовывать функции, описанные в пользовательских требованиях, и каким образом они должны быть структурированы внутри системы.
	3. Модульные/Компонентные требования (Module/Component Requirements):
	Описывают специфические функциональные требования для отдельных компонентов или модулей системы, определяя их поведение и взаимодействие друг с другом.
	
5.	Перечислите Нефункциональные уровни требований	

	1. Производительность (Performance)
	2. Надежность (Reliability)
	3. Безопасность (Security)
	4. Удобство использования (Usability)
	5. Поддерживаемость (Maintainability)
	6. Совместимость (Compatibility)
	7. Масштабируемость (Scalability)
	8. Доступность (Availability)
	9. Экономичность (Cost):"

6.	Перечислите техники сбора требований

	1. Интервью;
	2. Работа с фокусными группами;
	3. Анкетирование;
	4. Семинары и мозговой штурм;
	5. Наблюдение;
	6. Прототипирование;
	7. Анализ документов;
	8. Моделирование процессов и взаимодействий;
	9. Самостоятельное описание;
	
7.	Что такое Спецификация требований программного обеспечения (SRS)?	

	System requirements specification 
	1. Объясняет независимую цель и фрэймворк для разработки
	2. Описывает общую функциональность системы
	3. Может включать себя use cases описывающее какие взаимодействия могут быть у пользовотеля с системой
	
8.	Что такое Use Case?	

Use case (также юзкейс, сценарий использования) – это сценарий взаимодействия пользователя (или пользователей) с программным продуктом для достижения конкретной цели.


9	Приведите пример Use Case	

	Название: Авторизация пользователя на сайте с помощью имейла
	Актеры: Пользователь, Система
	Краткое описание: Пользователь хочет авторизоваться на сайте
	Предусловия: Пользователь уже зарегестрирован на сайте
		Шаги:
	1. Пользователь открывает страницу авторизации на сайте.
	2. Пользователь вводит свой имейл и пароль в соответствующие поля.
	3. Пользователь нажимает кнопку ""Войти"".
	4. Система проверяет введенные учетные данные.
	5. Если данные верны, система авторизует пользователя и перенаправляет его на главную страницу сайта.
	6. Если данные неверны или учетная запись не существует, система выводит сообщение об ошибке.

10.	Перечислите Характеристики качества требований	

	1. Полнота;
	2. Корректность;
	3. Последовательность;
	4. Ясность;
	5. Прослеживаемость;
	6. Изменяемость;
	7. Тестируемость;
	
11.	Приведите пример к каждой Характеристике качества требований:

	1. Форма регистрации должна содержать поля для ввода адреса электронной почты, пароля и подтверждения пароля.
	2. Длина пароля должна быть не менее 8 символов и содержать как минимум одну букву в верхнем регистре и одну цифру.
	3. При входе на сайт пользователь должен ввести свой логин и пароль в соответствующие поля формы, затем нажать кнопку 'Войти'. После этого система должна проверить правильность введенных данных и авторизовать пользователя. В случае успешной авторизации пользователь должен быть перенаправлен на свою персональную страницу или на главную страницу сайта.
	4. Система должна автоматически блокировать аккаунт пользователя после трех неудачных попыток ввода пароля подряд.
	5. Каждое требование должно быть помечено уникальным идентификатором и внесено в трекер задач для отслеживания статуса выполнения.
	6. Возможность оплаты кредитной картой должна быть добавлена к функционалу системы в течение двух недель после релиза.
	7. При нажатии на кнопку 'Отправить' на странице формы обратной связи, должно появляться сообщение об успешной отправке.
	
12.	Что такое Пользовательские истории(User story)?	

	User Story -- документ, который описывет типы пользователей, что они хотят и почему. Написано от лица пользователя.

13.	Приведите пример Пользовательских историй(User story)	
	
	Я как пользовалень хочу иметь возможность зарегестрироваться на сайте с помощью Google-аккунта чтобы ускорить процесс регистрации

14.	Какие преимущества и недостатки Пользовательских историй(User story)?	
	Плюсы:
	 1. Простота и понятность
	 2. Фокус на потребностях пользователя
	 3. Итеративность и гибкость
	 4. Легкость оценки и приоритизации
	Минусы:
	 1. Недостаток детализации
	 2. Опасность для новых членов команды
	 3. Ограниченность в описании нефункциональных требований
	 4. Требуется активное взаимодействие с заказчиком
	 
15.	Что такое Критерии приемки(Acceptance criteria)?	
	
	Критерии приемки (acceptance criteria): Критерии выхода, которым должны соответствовать компонент или система, для того, чтобы быть принятыми пользователем, заказчиком или другим уполномоченным лицом. 

16.	Перечислите виды и форматы критерий приемки	

	1. Scenario-based acceptance criteria соответствует формату “Дано/Когда/Тогда” (“Given/When/Then”) (основан на BDD - behavior driven development):
	2. Rule-Based Acceptance Criteria - это простой список «правил» о том, как функция должна выглядеть / работать

17.	Приведите пример критерий приемки - список правил	

	1. Все кнопки должны быть определенного цвета;
	2. Кнопка входа должна перенаправлять пользователя в определенный раздел;
	3. Кнопка регистрации должна находиться в определенной области;
	4. Все кнопки должны быть серыми, если не выполняются определенные требования;
	
18.	Приведите пример критерий приемки- поведенческий сценарий	

	1. Given /какой-то аспект, связанный с поведением пользователя/
	2. When /пользователь выполняет определенное действие/
	3. Then /происходит определенный результат/
	Между ними в случае нескольких условий можно добавлять “И” (AND).

19.	Перечислите критерии INVEST для User story	

	I -- Independence (независимая от других историй);
	N -- Negotiable (доступная, отражает суть, а не детали);
	V -- Valuable (ценная для клиентов, бизнеса и стейкхолдеров);
	E -- Estimate (оцениваемая по сложности);
	S -- Small (компактная, может быть сделана за 1 итерацию);
	T -- Testing (тестируемая, имеет критерии приемки);
	
20.	Назовите типы метрик тестирования. Каковы цели ввода метрик? Приведите примеры метрик.	

	1. Метрики процесса: Характеристики проекта и его прогресс оцениваются метриками процесса. Эти характеристики являются критически важными для улучшения процессов в SDLC (жизненном цикле разработки).
	2. Метрики продукта: Объем, дизайн, производительность, качество и сложность продукта определяются метриками продукта. Опираясь на эти характеристики, разработчики повышают качество разрабатываемого ими программного обеспечения.
	3. Метрики проекта: Метрики проекта используются для оценки общего качества проекта. Они используются для оценки ресурсов и результатов проекта, а также для определения затрат, производительности и недостатков.
	Цели Метрик:
	1. Оценка производительности
	2. Улучшение качества продукта
	3. Принятие управленческих решений
	4. Мониторинг процессов
	5. Улучшение процессов
	Пример:
	Плотность дефектов (Defect Density):
	Формула: 
	Defect Density = Total number of defects / Size of code or functionality
	Эта метрика измеряет количество дефектов на единицу объема кода или функциональности. Обычно размер кода измеряется в строках или функциональных точках.

	Процент пройденных тестов (Test Pass Rate):
	Формула: 
	Test Pass Rate = Number of passed tests / Total number of tests × 100%
	Эта метрика измеряет процент тестов, которые успешно прошли в процессе тестирования. Она выражается в процентах и помогает оценить степень соответствия программного обеспечения его требованиям."
21.	Что такое приемка приложения?	

	Приемка приложения (или приемочное тестирование) - это процесс проверки и подтверждения соответствия разработанного приложения его спецификациям, требованиям и ожиданиям заказчика или конечного пользователя. Это финальный этап разработки перед выпуском приложения в продакшн. 
	Цель приемки заключается в проверке соответствия разработанного приложения заявленным требованиям заказчика и готовности приложения к использованию конечными пользователями.

22. Что такое аудит приложения?	
	
	Аудит приложения - это процесс анализа и оценки безопасности, производительности, эффективности и качества программного обеспечения. Цель аудита приложения заключается в выявлении потенциальных проблем, уязвимостей и недочетов, которые могут повлиять на работоспособность, безопасность или удовлетворение пользовательских потребностей.

23.	Этапы проведения аудита.	

	1. Планирование: Определение целей аудита,  сроков и бюджет, составление плана аудита;
	2. Сбор и анализ требований, исходного кода и информации о сетях и инфраструтуре;
	(Проверка конфигурации сетевых компонентов и серверов.)
	3. Анализ безопасности, производительности, качества кода;
	4. Тестирование на проникновение, Тестирование функциональности;
	5. Документирование результатов: Составление отчета, предоставление рекомендаций;
	
24.	Чем приемка приложения отличается от аудита?	

	Цель:
	Приемка приложения: Цель приемки заключается в проверке соответствия разработанного приложения заявленным требованиям заказчика и готовности приложения к использованию конечными пользователями.
	Аудит приложения: Цель аудита заключается в выявлении потенциальных проблем, уязвимостей и недочетов в приложении, а также оценке его безопасности, производительности и качества.
	Методология:
	Приемка приложения: Обычно включает в себя выполнение заданных заказчиком тестовых сценариев и проверку соответствия функциональности и требованиям.
	Аудит приложения: Включает в себя более глубокий анализ и оценку различных аспектов приложения, включая безопасность, производительность, качество кода и т. д.
	Участники:
	Приемка приложения: Обычно проводится заказчиком или представителями конечных пользователей.
	Аудит приложения: Чаще всего проводится специалистами по информационной безопасности, разработчиками или экспертами в области качества программного обеспечения.