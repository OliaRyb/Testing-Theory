1. Что такое функциональное тестирование (Functional/Behavioral testing)?	

Функциональное тестирование – один из видов тестирования, направленного на проверку соответствий функциональных требований ПО к его реальным характеристикам. 

2. Что такое нефункциональное тестирование (Non-Functional testing)?	

Нефункциональное тестирование – тестирование свойств, которые не относятся к функциональности системы.

3. Какие виды тестирования относятся к функциональному тестированию?	

	• Модульное (компонентное);
	• Интеграционное;
	• Системное;
	• Регрессионное;
	• Приемочное;
	
4. Какие виды тестирования относятся к нефункциональному тестированию?	
	1. Надежность (реакция системы на непредвиденные ситуации);
	2. Производительность (Работоспособность системы под разными нагрузками);
	3. Удобство (Исследование удобности работы с приложением с точки зрения пользователя);
	4. Масштабируемость (Требования к горизонтальному или вертикальному масштабированию приложения);
	5. Безопасность (Защищенность пользовательских данных);
	6. Портируемость (Переносимость приложения на различные платформы);
	7. Тестирование удобства использования;
	8. Конфигурационное тестирование (или тестирование портируемости);
	9. Тестирование на отказ и восстановление;
	
5. Что такое Статическое/Динамическое тестирование?	

	1. Статическое тестирование -- тестирование без запуска кода (тестирование документации);
	2. Динамическое тестирование -- тестирование с запуском кода;

6. Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?
	
	1. Метод белого ящика -- тестирование с доступом к коду;
	2. Метод серого ящика -- тестирование с частичным доступом к коду;
	3. Метод черного ящика -- тестирование без доступа к коду;
	
7. Что такое Компонентное(Component or Unit Testing) /Интеграционное (Integration Testing) /Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?	

	1. Компонентное или модульное тестирование -- тестирование отдельного модуля или конкретной фичи;
	2. Итеграционное тестирование -- тестирование нескольких модулей для проверки, что они коректно работают друг с другом;
	3. Системное тестирование – это тестирование программного обеспечения выполняемое на полной, интегрированной системе, с целью проверки соответствия системы исходным требованиям, как функциональным, так и не функциональным;
	4. Приемочное (acceptance) – вид тестирования, проводимый на этапе сдачи готового продукта (или готовой части продукта) заказчику. Целью приемочного тестирования является определение готовности продукта, что достигается путем прохода тестовых сценариев и случаев, которые построены на основе спецификации требований к разрабатываемому ПО;
	
8. Что такое Позитивное/Негативное тестирование?	

	1. Позитивное тестирование — все действия с приложением выполняются строго по инструкции без никаких недопустимых действий, некорректных данных и т.д;
	2. Негативное тестирование — в работе с приложением выполняются (некорректные) операции и используются данные, потенциально приводящие к ошибкам;
	
9. Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?	

	1. Альфа-тестирование -- тестирования до выхода в продакшн (выполняется тестировщиками);
	2. Бета-тестирование -- тестирование после выхода в продакшн (выполняется пользовалелями);
	
10. Что такое Интуитивное/Исследовательское тестирование?	

	1. Интуитивное тестирование (ad hoc) — полностью неформализованный подход, в котором не предполагается использования ни тест-кейсов, ни чек-листов, ни сценариев — тестировщик полностью опирается на свой профессионализм и интуицию для спонтанного выполнения с приложением действий, которые, как он считает, могут обнаружить ошибку;
	2. Исследовательское тестирование (exploratory testing) — частично формализованный подход, в рамках которого тестировщик выполняет работу с приложением по выбранному сценарию, который, в свою очередь, дорабатывается в процессе выполнения с целью более полного исследования приложения;
	
11. Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?	

	1. Дымное тестирование (Smoke) – это вид тестирования, который используется для обнаружения, в основном, явных ошибок, которые могут возникнуть на самых первых этапах выполнения программного обеспечения;
	2. Re-testing — выполнение тест-кейсов, которые ранее обнаружили дефекты, с целью подтверждения устранения дефектов;
	3. Санити (Sanity) -- это узконаправленное тестирование достаточное для доказательства того, что конкретная функция работает согласно заявленным в спецификации требованиям. Является подмножеством регрессионного тестирования. Используется для определения работоспособности определенной части приложения после изменений произведенных в ней или окружающей среде;
	4. Регрессионное тестирование – это набор тестов, направленных на обнаружение дефектов в уже протестированных участках приложения. Делается это совсем не для того, чтобы окончательно убедиться в отсутствии багов, а для поиска и исправления регрессионных ошибок;
	
12. Что такое Тестирование нового функционала/ Приемочное тестирование?

	1. Тестирование нового функционала (NFT) -- Тестирование нового функционала – процесс проверки нового, добавляемого функционала ПО на соответствие предъявляемым к нему требованиям;
	2. Приемочное (acceptance) – вид тестирования, проводимый на этапе сдачи готового продукта (или готовой части продукта) заказчику. Целью приемочного тестирования является определение готовности продукта, что достигается путем прохода тестовых сценариев и случаев, которые построены на основе спецификации требований к разрабатываемому ПО;
	
13. Что такое Ручное/Автоматизированное/Полуавтоматизированное тестирование?

	1. Ручное тестирование -- тестирование без использования автомотизированных инструментов;
	2. Автомотизированное -- тестирование с помощью написанного кода, так что тесты выполняются без помощи человека;
	3. Полуавтомотизированное -- тестирование с частичным использованием инструментов для автоматизации;
	
14. На основании чего происходит разработка тестовых сценариев?

	На остновании требований и потребностей пользователя.

15. Что такое Frontend / Backend?

	1. Бэкенд занимается разработкой серверной части веб-приложений и сайтов, отвечает за работу баз данных, серверов и логику, которая происходит на серверной стороне;
	2. Frontend занимается созданием клиентской части веб-приложений, сайтов, которая взаимодействует с пользователем;
	
16. Что такое тестирование безопасности?

Тестирование безопасности – комплекс исследований программного продукта, направленный на тестирование, обнаружение и исправление дефектов, связанных с сохранностью пользовательских данных;

17. Перечислите Принципы безопасности программного обеспечения.

	1. Целостность. Ограничение круга пользователей, имеющих доступ к данным, определение степени вреда, нанесенного при потере тех или иных данных;
	2. Доступность. Представляет собой требования о том, что ресурсы должны быть доступны авторизованному пользователю, внутреннему объекту или устройству. Как правило, чем более критичен ресурс тем выше уровень доступности должен быть;
	3. Конфиденциальность. Сокрытие определенных ресурсов или информации. Под конфиденциальностью можно понимать ограничение доступа к ресурсу некоторой категории пользователей, или другими словами, при каких условиях пользователь авторизован получить доступ к данному ресурсу;
	
18. Перечислите виды уязвимостей в безопасности программного обеспечения.

	1. XSS (Cross-SiteScripting) — это вид уязвимости программного обеспечения (Web приложений), при которой, на генерированной сервером странице, выполняются вредоносные скрипты, с целью атаки клиента;
	2. XSRF / CSRF (RequestForgery) — это вид уязвимости, позволяющий использовать недостатки HTTP протокола. Злоумышленники работают по следующей схеме: ссылка на вредоносный сайт устанавливается на странице, пользующейся доверием у пользователя, при переходе по вредоносной ссылке выполняется скрипт, сохраняющий личные данные пользователя (пароли, платежные данные и т.д.), либо отправляющий СПАМ сообщения от лица пользователя, либо изменяет доступ к учетной записи пользователя, для получения полного контроля над ней;
	3. Codeinjections (SQL, PHP, ASP и т.д.) — это вид уязвимости, при котором становится возможно осуществить запуск исполняемого кода с целью получения доступа к системным ресурсам, несанкционированного доступа к данным либо выведения системы из строя;
	4. Server-SideIncludes (SSI) Injection — это вид уязвимости, использующий вставку серверных команд в HTML код или запуск их напрямую с сервера;
	5. AuthorizationBypass — это вид уязвимости, при котором возможно получить несанкционированный доступ к учетной записи или документам другого пользователя;
	
19. Что такое Тестирование на отказ и восстановления Failover and Recovery Testing?

	Тестирование на отказ и восстановление -- исследование программной системы на предмет восстановления после ошибок, сбоев. Оценивание реакции защитных свойств приложения.
	
20. Что такое тестирование Эффективности использования ресурсов?

	Тестирование эффективности использования ресурсов — это процесс проверки программного обеспечения на предмет того, как оно использует системные ресурсы, такие как процессор, память, дисковое пространство и сетевую пропускную способность. Цель этого вида тестирования заключается в определении возможных проблем с производительностью, которые могут возникнуть при использовании ПО, и устранении их для оптимизации работы системы.
	
21. Что такое тестирование Масштабируемости (Scalability testing)?

	Масштабируемости -- проверка на соответствие требованиям к горизонтальному или вертикальному масштабированию приложения.
	
22. Что такое тестирование Производительности (Performance testing)?

	Тестирование производительности – это комплекс типов тестирования, целью которого является определение работоспособности, стабильности, потребления ресурсов и других атрибутов качества приложения в условиях различных сценариев использования и нагрузок. Тестирование производительности позволяет находить возможные уязвимости и недостатки в системе с целью предотвратить их пагубное влияние на работу программы в условиях использования.
	   - Нагрузочное тестирование (Loadtesting);
	   - Стресс-тестирование (Stresstesting);
	   - Тестирование стабильности или наработка на отказ (Stability/Reliabilitytesting);
	   
23. Что такое тестирование Надежности(Reliability Testing)?

	Надежность -- проверка реакции системы на непредвиденные ситуации.
	
24. Что такое тестирование Стабильности (Stability Testing)?

	Тестирование стабильности или наработка на отказ (Stability/Reliabilitytesting)  исследует работоспособность приложения при длительной работе во времени, при нормальной для программы нагрузке.
	
25. Что такое тестирование Удобства использования(Usability testing)?

	Тестирование удобства использования (Usability testing) – характеризует систему с точки зрения удобства использования конечного пользователя.
	
26. Что такое тестирование Локализации/ Совместимости/ Адаптивности?

	1. Тестирование локализации (Localization Testing) - это процесс проверки программного обеспечения на соответствие локальным и культурным особенностям конкретного региона или целевого рынка. 
	2. Тестирование совместимости — тестирование, направленное на проверку способности приложения работать в указанном окружении.
	3. Тестирование адаптивности помогает убедиться, что ваше приложение или веб-сайт выглядит и функционирует должным образом на различных устройствах и экранах.
	
27. Что такое ETL-тестирование/ Тестирование перед миграцией (Pre-Migration testing)/ Миграционное тестирование (Migration testing)/ Тестирование после миграции (Post-Migration testing)?

	1. ETL-тестирование проверяет данные при их передаче из источника в пункт назначения после преобразования. Этот процесс также предотвращает потерю и дублирование данных и гарантирует, что передача соответствует проверкам достоверности.

	2. Тестирование перед миграцией (Pre-Migration testing) -- вид тестирования, который включает в себя следующие шаги:
		1. Определенеи объема данных;
		2. Выполнение сопоставления данных (data mapping) между устаревшим и новым приложением;
		3. Подготовка тест-кейсов, тестовых сценариев для новых приложений;
		6. Выполнение тест-кейсов с набором пользователей;
		7. Запись количества данных;

	3. Миграционное тестирование (Migration testing)
		1. Фактическая миграция приложения;
		2. Брандмауэры, порты, хосты, аппаратные и программные конфигурации - все они изменяются в соответствии с новой системой, на которую переносится старая версия;
		3. Утечки данных, проверки безопасности;
		4. Проверяется связность между всеми компонентами приложения;
		Тестировщикам рекомендуется проверить вышеизложенное в бэкенде системы. После завершения миграции все серверы будут запущены, и будут выполнены базовые тесты, связанные с проверкой успешной миграции, что гарантирует, что все сквозные системы правильно подключены и все компоненты взаимодействуют друг с другом, БД запущен и работает, фронт успешно взаимодействует с бэком. Эти тесты должны быть идентифицированы заранее и записаны в документе «Спецификация тестов миграции» (Migration Test Specification document). 
		Иногда отдельный сценарий миграции также проверяется с помощью «тестирования белого ящика» в автономной среде тестирования. Следовательно, миграционное тестирование будет представлять собой комбинацию тестирования белого и черного ящиков.

	4. Тестирование после миграции (Post-Migration testing)
		Здесь сквозное тестирование системы выполняется в тестовой среде. Тестировщики выполняют определенные тестовые наборы, тестовые сценарии, варианты использования с устаревшими данными, а также с новым набором данных. В дополнение к этому, есть определенные элементы, которые необходимо проверить в перенесенных средах:
		1. Все устаревшие данные перенесены в новое приложение в течение запланированного времени простоя;
		2. Все изменения схемы (поля и таблицы добавлены или удалены) в соответствии с новой системой обновлены;
		3. Данные, перенесенные из устаревшего приложения в новое, должны сохранять свое значение и формат;
		4. Все перенесенные данные находятся в новом приложении;
		5. Безопасность базы данных;
		6. Целостность данных для всех возможных записей выборки;
		7. Ранее поддерживаемые функции в устаревшей системе работают должным образом в новой системе;
		8. Поток данных в приложении, который охватывает большинство компонентов;
		9. Интерфейс между компонентами должен быть тщательно протестирован;
		10. Никакие устаревшие данные не должны дублироваться во время миграции;
		11. Добавление, обновление, удаление данных устаревшего приложения в новом приложении должно поддерживаться.  Любое добавление, обновление, удаление данных в новое приложение не должно отражаться на устаревшем;
		12. Убедитесь, что изменения, внесенные в устаревшую систему, поддерживают новые функции, предоставляемые как часть новой системы;
		13. Убедитесь, что пользователи устаревшей системы могут продолжать использовать как старые, так и новые функциональные возможности, особенно те, которые связаны с изменениями;
		14. Проведите тесты функциональности на различных выборках данных;
		15. Тестирование производительности важно для того, чтобы убедиться, что переход на новые системы/программное обеспечение не ухудшил производительность системы;
		16. Также требуется проведение нагрузочных и стресс-тестов для обеспечения стабильности системы;
		17. Убедитесь, что обновление программного обеспечения не открыло никаких уязвимостей в системе безопасности, и, следовательно, проведите тестирование безопасности;
		18. Удобство использования - это еще один аспект, который необходимо проверить, в котором, если макет графического интерфейса пользователя / интерфейсная система изменились или изменилась какая-либо функциональность, какова простота использования, которую конечный пользователь чувствует по сравнению с устаревшей системой;
		19. Поскольку скоуп тестирования после миграции становится очень большим, идеально разделить важные тесты, которые необходимо выполнить в первую очередь, чтобы удостовериться, что миграция прошла успешно, а затем выполнить оставшиеся позже.